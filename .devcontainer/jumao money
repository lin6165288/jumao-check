# requirements:
# pip install flask line-bot-sdk python-dotenv

import os
import re
import math
from flask import Flask, request, abort
from linebot import LineBotApi, WebhookHandler
from linebot.exceptions import InvalidSignatureError
from linebot.models import MessageEvent, TextMessage, TextSendMessage

# ======= 環境變數 =======
CHANNEL_ACCESS_TOKEN = os.getenv("LINE_CHANNEL_ACCESS_TOKEN")
CHANNEL_SECRET = os.getenv("LINE_CHANNEL_SECRET")

line_bot_api = LineBotApi(CHANNEL_ACCESS_TOKEN)
handler = WebhookHandler(CHANNEL_SECRET)

app = Flask(__name__)

# ======= 規則設定 =======
BASE_SELL_RATE = 4.5

VIP_RATE_OFF = {
    "一般": 0.00,
    "VIP1": 0.02,
    "VIP2": 0.03,
    "VIP3": 0.05,
}

VIP_FEE_OFF = {
    "一般": 0,
    "VIP1": 10,
    "VIP2": 10,
    "VIP3": 10,
}

MIN_FEE = 20  # VIP 手續費最低收

def calc_base_fee(rmb: int) -> int:
    # 1~499=30；之後每 500 區間 +50
    # 500~999=50, 1000~1499=100, ...
    blocks = rmb // 500  # 整除
    return 30 + blocks * 50

def parse_command(text: str):
    """
    支援格式：
    - 報價 1200
    - 報價 1200 VIP1
    - 報價 2200 VIP3 用券
    """
    text = text.strip()
    if not text.startswith("報價"):
        return None
    # 取數字、等級、是否用券
    # e.g. "報價 2200 VIP3 用券"
    m = re.findall(r'(報價)\s+(\d+)(?:\s+(一般|VIP1|VIP2|VIP3))?(?:\s+(用券))?', text)
    if not m:
        return None
    _, rmb_str, level, coupon = m[0]
    rmb = int(rmb_str)
    level = level if level else "一般"
    use_coupon = (coupon == "用券")
    return rmb, level, use_coupon

def quote_twd(rmb: int, level: str, use_coupon: bool) -> int:
    # 匯率：依等級降低
    sell_rate = BASE_SELL_RATE - VIP_RATE_OFF.get(level, 0.0)

    # 手續費：依區間，VIP 再 -10，但最低 20；一般不降
    fee = calc_base_fee(rmb)
    fee_off = VIP_FEE_OFF.get(level, 0)
    if level == "一般":
        final_fee = fee
    else:
        final_fee = max(fee - fee_off, MIN_FEE)

    # VIP3 用券（滿 2000 才可用）
    coupon_cut = 50 if (level == "VIP3" and use_coupon and rmb >= 2000) else 0

    twd = rmb * sell_rate + final_fee - coupon_cut
    return int(round(twd))  # 四捨五入到整數

def build_reply(rmb: int, twd: int) -> str:
    return (
        f"【[報價單]\n"
        f"商品價格：{rmb} RMB\n"
        f"換算台幣價格：NT$ {twd}\n"
        f"沒問題的話跟我說一聲～\n"
        f"傳給您付款資訊】"
    )

# ======= Webhook =======
@app.route("/callback", methods=['POST'])
def callback():
    signature = request.headers.get('X-Line-Signature', '')
    body = request.get_data(as_text=True)

    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        abort(400)
    return 'OK'

@handler.add(MessageEvent, message=TextMessage)
def handle_message(event: MessageEvent):
    text = event.message.text.strip()
    parsed = parse_command(text)
    if not parsed:
        # 只回覆「報價」指令，其餘不回
        return

    rmb, level, use_coupon = parsed
    twd = quote_twd(rmb, level, use_coupon)
    reply = build_reply(rmb, twd)
    line_bot_api.reply_message(
        event.reply_token,
        TextSendMessage(text=reply)
    )

if __name__ == "__main__":
    # 本機測試用；部署平台請用 WSGI/適用的啟動方式
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 8000)))
